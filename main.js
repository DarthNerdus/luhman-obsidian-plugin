/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const lettersIDComponentSuccessors = {
    'a': 'b',
    'b': 'c',
    'c': 'd',
    'd': 'e',
    'e': 'f',
    'f': 'g',
    'g': 'h',
    'h': 'i',
    'i': 'j',
    'j': 'k',
    'k': 'l',
    'l': 'm',
    'm': 'n',
    'n': 'o',
    'o': 'p',
    'p': 'q',
    'q': 'r',
    'r': 's',
    's': 't',
    't': 'u',
    'u': 'v',
    'v': 'w',
    'w': 'x',
    'x': 'y',
    'y': 'z',
    'z': 'aa'
};
class NewZettel extends obsidian.Plugin {
    copyToClipboard(data) {
        const listener = (e) => {
            var _a;
            (_a = e.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/plain', data);
            e.preventDefault();
            document.removeEventListener('copy', listener);
        };
        document.addEventListener('copy', listener);
        document.execCommand('copy');
    }
    incrementStringIDComponent(id) {
        let comps = id.split("");
        let last = comps.pop();
        return comps.concat([lettersIDComponentSuccessors[last]]).join("");
    }
    incrementNumberIDComponent(id) {
        return (parseInt(id) + 1).toString();
    }
    isNumber(string) {
        return /^\d+$/.test(string);
    }
    incrementIDComponent(id) {
        if (this.isNumber(id)) {
            return this.incrementNumberIDComponent(id);
        }
        else {
            return this.incrementStringIDComponent(id);
        }
    }
    incrementID(id) {
        var parts = id.match(/([0-9]+|[a-z]+)/g);
        var lastPart = parts.pop();
        return parts.concat([this.incrementIDComponent(lastPart)]).join("");
    }
    nextComponentOf(id) {
        var parts = id.match(/([0-9]+|[a-z]+)/g);
        var lastPart = parts.pop();
        if (this.isNumber(lastPart)) {
            return "a";
        }
        else {
            return "1";
        }
    }
    firstChildOf(parentID) {
        return parentID + this.nextComponentOf(parentID);
    }
    idExists(id) {
        return this.app.vault.getMarkdownFiles().filter(function (file) { return file.basename == id; }).length != 0;
    }
    firstAvailableID(startingID) {
        var nextID = startingID;
        while (this.idExists(nextID)) {
            nextID = this.incrementID(nextID);
        }
        return nextID;
    }
    makeNoteForNextSiblingOf(sibling, title) {
        var nextID = this.firstAvailableID(this.incrementID(sibling.basename));
        let nextPath = this.app.fileManager.getNewFileParent(sibling.path).path + "/" + nextID + ".md";
        this.makeNote(nextPath, title);
        return nextID;
    }
    makeNoteForNextChildOf(parent, title) {
        var childID = this.firstAvailableID(this.firstChildOf(parent.basename));
        let nextPath = this.app.fileManager.getNewFileParent(parent.path).path + "/" + childID + ".md";
        this.makeNote(nextPath, title);
        return childID;
    }
    makeNote(path, title) {
        let app = this.app;
        this.app.vault.create(path, "# " + title + "\n\n").then(function (file) {
            var _a;
            (_a = app.workspace.activeLeaf) === null || _a === void 0 ? void 0 : _a.openFile(file).then(function (file) {
                var _a;
                (_a = app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor.exec('goEnd');
            });
        });
    }
    isZettelFile(name) {
        return /^((?:[0-9]+|[a-z]+)+)\.md$/.exec(name) != null;
    }
    makeNoteFunction(idGenerator, title) {
        var file = this.app.workspace.getActiveFile();
        if (file == null) {
            return;
        }
        if (this.isZettelFile(file.name)) {
            let nextID = idGenerator.bind(this, file, title)();
            this.copyToClipboard("[[" + nextID + "]]");
        }
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading New Zettel');
            // this.app.workspace.onLayoutReady(this.initialize);
            this.addCommand({
                id: 'new-sibling-note',
                name: 'New Sibling Zettel Note',
                callback: () => {
                    new NewZettelModal(this.app, (title) => {
                        this.makeNoteFunction(this.makeNoteForNextSiblingOf, title);
                    }).open();
                }
            });
            this.addCommand({
                id: 'new-child-note',
                name: 'New Child Zettel Note',
                callback: () => {
                    new NewZettelModal(this.app, (title) => {
                        this.makeNoteFunction(this.makeNoteForNextChildOf, title);
                    }).open();
                }
            });
            this.addCommand({
                id: 'zetel-test',
                name: 'Zettel Test',
                callback: () => {
                    // let completion = (te)
                    // new NewZettelModal(this.app).open();
                }
            });
        });
    }
    onunload() {
        console.log('unloading New Zettel');
        // this.initialize(true);
    }
}
class NewZettelModal extends obsidian.Modal {
    constructor(app, completion) {
        super(app);
        this.completion = completion;
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.parentElement.addClass("zettel-modal");
        this.titleEl.setText("New zettel title...");
        let container = contentEl.createEl("div");
        container.addClass("zettel-modal-container");
        let textBox = contentEl.createEl("input", { "type": "text" });
        textBox.addClass("zettel-modal-textbox");
        textBox.id = "zettel-modal-textbox";
        textBox.addEventListener("keydown", (event) => {
            if (event.key == "Enter") {
                event.preventDefault();
                this.goTapped();
            }
        });
        container.append(textBox);
        let button = contentEl.createEl("input", { "type": "button", "value": "GO" });
        button.addClass("zettel-modal-button");
        button.addEventListener("click", (e) => this.goTapped());
        container.append(button);
        contentEl.append(container);
        window.setTimeout(function () {
            textBox.focus();
        }, 0);
    }
    goTapped() {
        let title = this.contentEl.ownerDocument.getElementById("zettel-modal-textbox").value;
        this.completion(title);
        this.close();
    }
}

module.exports = NewZettel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
