/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const lettersIDComponentSuccessors = {
    'a': 'b',
    'b': 'c',
    'c': 'd',
    'd': 'e',
    'e': 'f',
    'f': 'g',
    'g': 'h',
    'h': 'i',
    'i': 'j',
    'j': 'k',
    'k': 'l',
    'l': 'm',
    'm': 'n',
    'n': 'o',
    'o': 'p',
    'p': 'q',
    'q': 'r',
    'r': 's',
    's': 't',
    't': 'u',
    'u': 'v',
    'v': 'w',
    'w': 'x',
    'x': 'y',
    'y': 'z',
    'z': 'aa'
};
class NewZettel extends obsidian.Plugin {
    copyToClipboard(data) {
        const listener = (e) => {
            var _a;
            (_a = e.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/plain', data);
            e.preventDefault();
            document.removeEventListener('copy', listener);
        };
        document.addEventListener('copy', listener);
        document.execCommand('copy');
    }
    incrementStringIDComponent(id) {
        let comps = id.split("");
        let last = comps.pop();
        return comps.concat([lettersIDComponentSuccessors[last]]).join("");
    }
    incrementNumberIDComponent(id) {
        return (parseInt(id) + 1).toString();
    }
    isNumber(string) {
        return /^\d+$/.test(string);
    }
    incrementIDComponent(id) {
        if (this.isNumber(id)) {
            return this.incrementNumberIDComponent(id);
        }
        else {
            return this.incrementStringIDComponent(id);
        }
    }
    incrementID(id) {
        var parts = id.match(/([0-9]+|[a-z]+)/g);
        var lastPart = parts.pop();
        return parts.concat([this.incrementIDComponent(lastPart)]).join("");
    }
    parentID(id) {
        var parts = id.match(/([0-9]+|[a-z]+)/g);
        if (parts) {
            parts.pop();
            return parts.join("");
        }
        else {
            return "";
        }
    }
    nextComponentOf(id) {
        var parts = id.match(/([0-9]+|[a-z]+)/g);
        var lastPart = parts.pop();
        if (this.isNumber(lastPart)) {
            return "a";
        }
        else {
            return "1";
        }
    }
    firstChildOf(parentID) {
        return parentID + this.nextComponentOf(parentID);
    }
    idExists(id) {
        return this.app.vault.getMarkdownFiles().filter(function (file) { return file.basename == id; }).length != 0;
    }
    firstAvailableID(startingID) {
        var nextID = startingID;
        while (this.idExists(nextID)) {
            nextID = this.incrementID(nextID);
        }
        return nextID;
    }
    makeNoteForNextSiblingOf(sibling) {
        var nextID = this.firstAvailableID(this.incrementID(sibling.basename));
        this.app.fileManager.getNewFileParent(sibling.path).path + "/" + nextID + ".md";
        return nextID;
    }
    makeNoteForNextChildOf(parent) {
        var childID = this.firstAvailableID(this.firstChildOf(parent.basename));
        this.app.fileManager.getNewFileParent(parent.path).path + "/" + childID + ".md";
        return childID;
    }
    makeNote(path, title, content, placeCursorAtStartOfContent) {
        let app = this.app;
        let titleContent = "# " + title + "\n\n";
        let fullContent = titleContent + content;
        this.app.vault.create(path, fullContent).then(function (file) {
            var _a;
            (_a = app.workspace.activeLeaf) === null || _a === void 0 ? void 0 : _a.openFile(file).then(function (file) {
                var _a;
                let editor = (_a = app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor;
                if (placeCursorAtStartOfContent) {
                    let position = { line: 2, ch: 0 };
                    editor === null || editor === void 0 ? void 0 : editor.setCursor(position);
                }
                else {
                    editor === null || editor === void 0 ? void 0 : editor.exec('goEnd');
                }
            });
        });
    }
    isZettelFile(name) {
        return /^((?:[0-9]+|[a-z]+)+)\.md$/.exec(name) != null;
    }
    makeNoteFunction(idGenerator) {
        var _a;
        var file = this.app.workspace.getActiveFile();
        if (file == null) {
            return;
        }
        if (this.isZettelFile(file.name)) {
            let fileID = file.basename;
            let fileLink = "[[" + fileID + "]]";
            let editor = (_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor;
            let selection = editor === null || editor === void 0 ? void 0 : editor.getSelection();
            let nextID = idGenerator.bind(this, file)();
            let nextPath = this.app.fileManager.getNewFileParent(file.path).path + "/" + nextID + ".md";
            let newLink = "[[" + nextID + "]]";
            if (selection) {
                let title = selection.split(/\s+/).map(w => w[0].toUpperCase() + w.slice(1)).join(' ');
                let selectionPos = editor.listSelections()[0];
                let positionCH = Math.max(selectionPos.head.ch, selectionPos.anchor.ch);
                let position = { line: selectionPos.anchor.line, ch: positionCH + 1 };
                editor.replaceRange(" " + newLink, position, position);
                this.makeNote(nextPath, title, fileLink, true);
            }
            else {
                new NewZettelModal(this.app, (title) => {
                    this.insertTextIntoCurrentNote(newLink);
                    this.makeNote(nextPath, title, fileLink, true);
                }).open();
            }
        }
    }
    renameZettel(id, toName) {
        return __awaiter(this, void 0, void 0, function* () {
            let zettel = this.app.vault.getMarkdownFiles().filter((file) => file.basename == id).first();
            if (zettel) {
                yield this.updateLinks(id, toName);
                yield this.app.vault.rename(zettel, zettel.parent.path + toName + "." + zettel.extension);
            }
        });
    }
    updateLinks(fromID, toID) {
        return __awaiter(this, void 0, void 0, function* () {
            let fromLink = "[[" + fromID + "]]";
            let toLink = "[[" + toID + "]]";
            let matchingFiles = [];
            for (const file of this.getZettels()) {
                let contents = yield this.app.vault.read(file);
                if (contents.contains(fromLink)) {
                    matchingFiles = matchingFiles.concat([[file, contents]]);
                }
            }
            for (const [file, contents] of matchingFiles) {
                let newContents = contents.replace(fromLink, toLink);
                yield this.app.vault.modify(file, newContents);
            }
        });
    }
    moveChildrenDown(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let children = this.getDirectChildZettels(id);
            for (const child of children) {
                yield this.moveZettelDown(child.basename);
            }
        });
    }
    moveZettelDown(id) {
        return __awaiter(this, void 0, void 0, function* () {
            this.moveChildrenDown(id);
            yield this.renameZettel(id, this.firstAvailableID(id));
        });
    }
    outdentZettel(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let newID = this.incrementID(this.parentID(id));
            if (this.idExists(newID)) {
                yield this.moveZettelDown(id);
            }
            for (const child of this.getDirectChildZettels(id)) {
                let newChildID = this.firstAvailableID(this.firstChildOf(newID));
                yield this.renameZettel(child.basename, newChildID);
            }
            yield this.renameZettel(id, newID);
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading New Zettel');
            // this.app.workspace.onLayoutReady(this.initialize);
            this.addCommand({
                id: 'new-sibling-note',
                name: 'New Sibling Zettel Note',
                callback: () => {
                    this.makeNoteFunction(this.makeNoteForNextSiblingOf);
                }
            });
            this.addCommand({
                id: 'new-child-note',
                name: 'New Child Zettel Note',
                callback: () => {
                    this.makeNoteFunction(this.makeNoteForNextChildOf);
                }
            });
            this.addCommand({
                id: 'insert-zettel-link',
                name: 'Insert Zettel Link',
                callback: () => {
                    // let completion = (te)
                    this.getAllNoteTitles().then((titles) => {
                        new ZettelSuggester(this.app, titles, this.currentlySelectedText(), (file) => {
                            this.insertTextIntoCurrentNote("[[" + file.basename + "]]");
                        }).open();
                    });
                }
            });
            this.addCommand({
                id: 'open-zettel',
                name: 'Open Zettel',
                callback: () => {
                    // let completion = (te)
                    this.getAllNoteTitles().then((titles) => {
                        new ZettelSuggester(this.app, titles, this.currentlySelectedText(), (file) => {
                            this.app.workspace.getUnpinnedLeaf().openFile(file);
                        }).open();
                    });
                }
            });
            this.addCommand({
                id: 'open-parent-zettel',
                name: 'Open Parent Zettel',
                callback: () => {
                    let file = this.currentFile();
                    if (file) {
                        this.openZettel(this.parentID(file.basename));
                    }
                }
            });
            this.addCommand({
                id: 'outdent-zettel',
                name: 'Outdent Zettel',
                callback: () => {
                    let file = this.currentFile();
                    if (file) {
                        this.outdentZettel(file.basename);
                    }
                }
            });
        });
    }
    onunload() {
        console.log('unloading New Zettel');
        // this.initialize(true);
    }
    currentFile() {
        var _a;
        return (_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.file;
    }
    openZettel(id) {
        let file = this.app.vault.getMarkdownFiles().filter((file) => file.basename == id).first();
        if (file) {
            this.app.workspace.getUnpinnedLeaf().openFile(file);
        }
    }
    currentlySelectedText() {
        var _a;
        return (_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor.getSelection();
    }
    insertTextIntoCurrentNote(text) {
        let view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (view) {
            let editor = view.editor;
            let position;
            if (editor.getSelection()) {
                let selectionPos = editor.listSelections()[0];
                let positionCH = Math.max(selectionPos.head.ch, selectionPos.anchor.ch);
                position = { line: selectionPos.anchor.line, ch: positionCH + 1 };
            }
            else {
                position = editor.getCursor();
            }
            editor.replaceRange(" " + text, position, position);
        }
    }
    getZettels() {
        return this.app.vault.getMarkdownFiles().filter((file) => {
            const ignore = /^[_layouts|templates|scripts]/;
            return file.path.match(ignore) == null;
        });
    }
    getDirectChildZettels(ofParent) {
        return this.getZettels().filter((file) => { return this.parentID(file.basename) == ofParent; });
    }
    getAllNoteTitles() {
        return __awaiter(this, void 0, void 0, function* () {
            const regex = /# (.+)\s*/;
            let titles = new Map();
            for (const file of this.getZettels()) {
                yield this.app.vault.cachedRead(file).then((text) => {
                    let match = text.match(regex);
                    if (match) {
                        titles.set(match[1], file);
                    }
                });
            }
            return titles;
        });
    }
}
class NewZettelModal extends obsidian.Modal {
    constructor(app, completion) {
        super(app);
        this.completion = completion;
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.parentElement.addClass("zettel-modal");
        this.titleEl.setText("New zettel title...");
        let container = contentEl.createEl("div");
        container.addClass("zettel-modal-container");
        let textBox = contentEl.createEl("input", { "type": "text" });
        textBox.addClass("zettel-modal-textbox");
        textBox.id = "zettel-modal-textbox";
        textBox.addEventListener("keydown", (event) => {
            if (event.key == "Enter") {
                event.preventDefault();
                this.goTapped();
            }
        });
        container.append(textBox);
        let button = contentEl.createEl("input", { "type": "button", "value": "GO" });
        button.addClass("zettel-modal-button");
        button.addEventListener("click", (e) => this.goTapped());
        container.append(button);
        contentEl.append(container);
        window.setTimeout(function () {
            textBox.focus();
        }, 0);
    }
    goTapped() {
        let title = this.contentEl.ownerDocument.getElementById("zettel-modal-textbox").value;
        this.completion(title);
        this.close();
    }
}
class ZettelSuggester extends obsidian.SuggestModal {
    constructor(app, titles, search, completion) {
        super(app);
        this.initialQuery = search !== null && search !== void 0 ? search : "";
        this.titles = titles;
        this.completion = completion;
    }
    onOpen() {
        super.onOpen();
        this.inputEl.value = this.initialQuery;
        var event = new Event('input');
        this.inputEl.dispatchEvent(event);
    }
    getSuggestions(query) {
        let sanitisedQuery = query.toLowerCase().replace(" ", "");
        return Array.from(this.titles.keys()).filter((title) => {
            let sanitisedTitle = title.toLowerCase().replace(" ", "");
            return sanitisedTitle.contains(sanitisedQuery);
        });
    }
    renderSuggestion(value, el) {
        el.setText(value);
    }
    onChooseSuggestion(item, evt) {
        this.completion(this.titles.get(item));
    }
}

module.exports = NewZettel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
